"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `Account`."""
  allAccountsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): [Account!]

  """Reads a set of `Category`."""
  allCategoriesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): [Category!]

  """Reads a set of `DailyDetail`."""
  allDailyDetailsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyDetail`."""
    orderBy: [DailyDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyDetailCondition
  ): [DailyDetail!]

  """Reads a set of `DailyTotalView`."""
  allDailyTotalViewsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyTotalView`."""
    orderBy: [DailyTotalViewsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyTotalViewCondition
  ): [DailyTotalView!]

  """Reads a set of `Genre`."""
  allGenresList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition
  ): [Genre!]

  """Reads a set of `TotalByAccountView`."""
  allTotalByAccountViewsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TotalByAccountView`."""
    orderBy: [TotalByAccountViewsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TotalByAccountViewCondition
  ): [TotalByAccountView!]

  """Reads a set of `TotalByCategoryView`."""
  allTotalByCategoryViewsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TotalByCategoryView`."""
    orderBy: [TotalByCategoryViewsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TotalByCategoryViewCondition
  ): [TotalByCategoryView!]

  """Reads a set of `User`."""
  allUsersList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): [User!]
  accountByAccountId(accountId: String!): Account
  categoryByCategoryId(categoryId: String!): Category
  dailyDetailBySerialNo(serialNo: Int!): DailyDetail
  genreByGenreId(genreId: String!): Genre
  userByUserId(userId: String!): User

  """Reads and enables pagination through a set of `TotalByAccountView`."""
  accountTotalList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [TotalByAccountView]

  """Reads and enables pagination through a set of `TotalByCategoryView`."""
  categoryTotalByMonthList(
    fromDate: Date
    toDate: Date

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [TotalByCategoryView]

  """Reads and enables pagination through a set of `DailyDetail`."""
  dailyDetailByDateList(
    fromDate: Date
    toDate: Date

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [DailyDetail]

  """Reads and enables pagination through a set of `DailyTotalView`."""
  dailyTotalViewByDateIocomeTypeList(
    iocomeType: IocomeType
    date: Date

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [DailyTotalView]

  """Reads a single `Account` using its globally unique `ID`."""
  account(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    nodeId: ID!
  ): Account

  """Reads a single `Category` using its globally unique `ID`."""
  category(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    nodeId: ID!
  ): Category

  """Reads a single `DailyDetail` using its globally unique `ID`."""
  dailyDetail(
    """
    The globally unique `ID` to be used in selecting a single `DailyDetail`.
    """
    nodeId: ID!
  ): DailyDetail

  """Reads a single `Genre` using its globally unique `ID`."""
  genre(
    """The globally unique `ID` to be used in selecting a single `Genre`."""
    nodeId: ID!
  ): Genre

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Account implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  accountId: String!
  accountName: String!
  validFlag: Boolean
  displayOrder: Int!
  ownerUserId: String!

  """Reads a single `User` that is related to this `Account`."""
  userByOwnerUserId: User

  """Reads and enables pagination through a set of `DailyDetail`."""
  dailyDetailsByAccountIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyDetail`."""
    orderBy: [DailyDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyDetailCondition
  ): [DailyDetail!]!
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: String!
  userName: String!
  displayOrder: Int!

  """Reads and enables pagination through a set of `Account`."""
  accountsByOwnerUserIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): [Account!]!

  """Reads and enables pagination through a set of `DailyDetail`."""
  dailyDetailsByUserIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyDetail`."""
    orderBy: [DailyDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyDetailCondition
  ): [DailyDetail!]!
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  NATURAL
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  VALID_FLAG_ASC
  VALID_FLAG_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  OWNER_USER_ID_ASC
  OWNER_USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `accountId` field."""
  accountId: String

  """Checks for equality with the object’s `accountName` field."""
  accountName: String

  """Checks for equality with the object’s `validFlag` field."""
  validFlag: Boolean

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int

  """Checks for equality with the object’s `ownerUserId` field."""
  ownerUserId: String
}

type DailyDetail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  serialNo: Int!
  date: Date!
  categoryId: String!
  accountId: String!
  userId: String!
  amount: BigFloat!
  memo: String

  """Reads a single `Category` that is related to this `DailyDetail`."""
  categoryByCategoryId: Category

  """Reads a single `Account` that is related to this `DailyDetail`."""
  accountByAccountId: Account

  """Reads a single `User` that is related to this `DailyDetail`."""
  userByUserId: User
}

"""The day, does not include a time."""
scalar Date

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

type Category implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  categoryId: String!
  categoryName: String!
  genreId: String!
  validFlag: Boolean
  displayOrder: Int!

  """Reads a single `Genre` that is related to this `Category`."""
  genreByGenreId: Genre

  """Reads and enables pagination through a set of `DailyDetail`."""
  dailyDetailsByCategoryIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyDetail`."""
    orderBy: [DailyDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyDetailCondition
  ): [DailyDetail!]!
}

type Genre implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  genreId: String!
  genreName: String!
  genreType: GenreType!
  iocomeType: IocomeType!
  validFlag: Boolean
  displayOrder: Int!

  """Reads and enables pagination through a set of `Category`."""
  categoriesByGenreIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): [Category!]!
}

enum GenreType {
  FIXED
  FLUCTUATION
}

enum IocomeType {
  INCOME
  OUTCOME
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NATURAL
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  CATEGORY_NAME_ASC
  CATEGORY_NAME_DESC
  GENRE_ID_ASC
  GENRE_ID_DESC
  VALID_FLAG_ASC
  VALID_FLAG_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `categoryId` field."""
  categoryId: String

  """Checks for equality with the object’s `categoryName` field."""
  categoryName: String

  """Checks for equality with the object’s `genreId` field."""
  genreId: String

  """Checks for equality with the object’s `validFlag` field."""
  validFlag: Boolean

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int
}

"""Methods to use when ordering `DailyDetail`."""
enum DailyDetailsOrderBy {
  NATURAL
  SERIAL_NO_ASC
  SERIAL_NO_DESC
  DATE_ASC
  DATE_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  MEMO_ASC
  MEMO_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DailyDetail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DailyDetailCondition {
  """Checks for equality with the object’s `serialNo` field."""
  serialNo: Int

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: String

  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `memo` field."""
  memo: String
}

type DailyTotalView {
  date: Date
  iocomeType: IocomeType
  total: BigFloat
}

"""Methods to use when ordering `DailyTotalView`."""
enum DailyTotalViewsOrderBy {
  NATURAL
  DATE_ASC
  DATE_DESC
  IOCOME_TYPE_ASC
  IOCOME_TYPE_DESC
  TOTAL_ASC
  TOTAL_DESC
}

"""
A condition to be used against `DailyTotalView` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DailyTotalViewCondition {
  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `iocomeType` field."""
  iocomeType: IocomeType

  """Checks for equality with the object’s `total` field."""
  total: BigFloat
}

"""Methods to use when ordering `Genre`."""
enum GenresOrderBy {
  NATURAL
  GENRE_ID_ASC
  GENRE_ID_DESC
  GENRE_NAME_ASC
  GENRE_NAME_DESC
  GENRE_TYPE_ASC
  GENRE_TYPE_DESC
  IOCOME_TYPE_ASC
  IOCOME_TYPE_DESC
  VALID_FLAG_ASC
  VALID_FLAG_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Genre` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GenreCondition {
  """Checks for equality with the object’s `genreId` field."""
  genreId: String

  """Checks for equality with the object’s `genreName` field."""
  genreName: String

  """Checks for equality with the object’s `genreType` field."""
  genreType: GenreType

  """Checks for equality with the object’s `iocomeType` field."""
  iocomeType: IocomeType

  """Checks for equality with the object’s `validFlag` field."""
  validFlag: Boolean

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int
}

type TotalByAccountView {
  accountId: String
  accountName: String
  displayOrder: Int
  iocomeType: IocomeType
  total: BigFloat
}

"""Methods to use when ordering `TotalByAccountView`."""
enum TotalByAccountViewsOrderBy {
  NATURAL
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  IOCOME_TYPE_ASC
  IOCOME_TYPE_DESC
  TOTAL_ASC
  TOTAL_DESC
}

"""
A condition to be used against `TotalByAccountView` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TotalByAccountViewCondition {
  """Checks for equality with the object’s `accountId` field."""
  accountId: String

  """Checks for equality with the object’s `accountName` field."""
  accountName: String

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int

  """Checks for equality with the object’s `iocomeType` field."""
  iocomeType: IocomeType

  """Checks for equality with the object’s `total` field."""
  total: BigFloat
}

type TotalByCategoryView {
  date: Date
  iocomeType: IocomeType
  genreName: String
  categoryName: String
  total: BigFloat
}

"""Methods to use when ordering `TotalByCategoryView`."""
enum TotalByCategoryViewsOrderBy {
  NATURAL
  DATE_ASC
  DATE_DESC
  IOCOME_TYPE_ASC
  IOCOME_TYPE_DESC
  GENRE_NAME_ASC
  GENRE_NAME_DESC
  CATEGORY_NAME_ASC
  CATEGORY_NAME_DESC
  TOTAL_ASC
  TOTAL_DESC
}

"""
A condition to be used against `TotalByCategoryView` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TotalByCategoryViewCondition {
  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `iocomeType` field."""
  iocomeType: IocomeType

  """Checks for equality with the object’s `genreName` field."""
  genreName: String

  """Checks for equality with the object’s `categoryName` field."""
  categoryName: String

  """Checks for equality with the object’s `total` field."""
  total: BigFloat
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  USER_NAME_ASC
  USER_NAME_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `userName` field."""
  userName: String

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Account`."""
  createAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAccountInput!
  ): CreateAccountPayload

  """Creates a single `Category`."""
  createCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """Creates a single `DailyDetail`."""
  createDailyDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDailyDetailInput!
  ): CreateDailyDetailPayload

  """Creates a single `Genre`."""
  createGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGenreInput!
  ): CreateGenrePayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `Account` using its globally unique id and a patch."""
  updateAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload

  """Updates a single `Account` using a unique key and a patch."""
  updateAccountByAccountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountByAccountIdInput!
  ): UpdateAccountPayload

  """Updates a single `Category` using its globally unique id and a patch."""
  updateCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategoryByCategoryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByCategoryIdInput!
  ): UpdateCategoryPayload

  """
  Updates a single `DailyDetail` using its globally unique id and a patch.
  """
  updateDailyDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDailyDetailInput!
  ): UpdateDailyDetailPayload

  """Updates a single `DailyDetail` using a unique key and a patch."""
  updateDailyDetailBySerialNo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDailyDetailBySerialNoInput!
  ): UpdateDailyDetailPayload

  """Updates a single `Genre` using its globally unique id and a patch."""
  updateGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGenreInput!
  ): UpdateGenrePayload

  """Updates a single `Genre` using a unique key and a patch."""
  updateGenreByGenreId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGenreByGenreIdInput!
  ): UpdateGenrePayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUserIdInput!
  ): UpdateUserPayload

  """Deletes a single `Account` using its globally unique id."""
  deleteAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountInput!
  ): DeleteAccountPayload

  """Deletes a single `Account` using a unique key."""
  deleteAccountByAccountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountByAccountIdInput!
  ): DeleteAccountPayload

  """Deletes a single `Category` using its globally unique id."""
  deleteCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategoryByCategoryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByCategoryIdInput!
  ): DeleteCategoryPayload

  """Deletes a single `DailyDetail` using its globally unique id."""
  deleteDailyDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDailyDetailInput!
  ): DeleteDailyDetailPayload

  """Deletes a single `DailyDetail` using a unique key."""
  deleteDailyDetailBySerialNo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDailyDetailBySerialNoInput!
  ): DeleteDailyDetailPayload

  """Deletes a single `Genre` using its globally unique id."""
  deleteGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGenreInput!
  ): DeleteGenrePayload

  """Deletes a single `Genre` using a unique key."""
  deleteGenreByGenreId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGenreByGenreIdInput!
  ): DeleteGenrePayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUserIdInput!
  ): DeleteUserPayload
}

"""The output of our create `Account` mutation."""
type CreateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was created by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Account`."""
  userByOwnerUserId: User
}

"""All input for the create `Account` mutation."""
input CreateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Account` to be created by this mutation."""
  account: AccountInput!
}

"""An input for mutations affecting `Account`"""
input AccountInput {
  accountId: String!
  accountName: String!
  validFlag: Boolean
  displayOrder: Int!
  ownerUserId: String!
}

"""The output of our create `Category` mutation."""
type CreateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was created by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Genre` that is related to this `Category`."""
  genreByGenreId: Genre
}

"""All input for the create `Category` mutation."""
input CreateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Category` to be created by this mutation."""
  category: CategoryInput!
}

"""An input for mutations affecting `Category`"""
input CategoryInput {
  categoryId: String!
  categoryName: String!
  genreId: String!
  validFlag: Boolean
  displayOrder: Int!
}

"""The output of our create `DailyDetail` mutation."""
type CreateDailyDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DailyDetail` that was created by this mutation."""
  dailyDetail: DailyDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `DailyDetail`."""
  categoryByCategoryId: Category

  """Reads a single `Account` that is related to this `DailyDetail`."""
  accountByAccountId: Account

  """Reads a single `User` that is related to this `DailyDetail`."""
  userByUserId: User
}

"""All input for the create `DailyDetail` mutation."""
input CreateDailyDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DailyDetail` to be created by this mutation."""
  dailyDetail: DailyDetailInput!
}

"""An input for mutations affecting `DailyDetail`"""
input DailyDetailInput {
  serialNo: Int
  date: Date!
  categoryId: String!
  accountId: String!
  userId: String!
  amount: BigFloat!
  memo: String
}

"""The output of our create `Genre` mutation."""
type CreateGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Genre` that was created by this mutation."""
  genre: Genre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Genre` mutation."""
input CreateGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Genre` to be created by this mutation."""
  genre: GenreInput!
}

"""An input for mutations affecting `Genre`"""
input GenreInput {
  genreId: String!
  genreName: String!
  genreType: GenreType!
  iocomeType: IocomeType!
  validFlag: Boolean
  displayOrder: Int!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  userId: String!
  userName: String!
  displayOrder: Int!
}

"""The output of our update `Account` mutation."""
type UpdateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was updated by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Account`."""
  userByOwnerUserId: User
}

"""All input for the `updateAccount` mutation."""
input UpdateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  accountPatch: AccountPatch!
}

"""
Represents an update to a `Account`. Fields that are set will be updated.
"""
input AccountPatch {
  accountId: String
  accountName: String
  validFlag: Boolean
  displayOrder: Int
  ownerUserId: String
}

"""All input for the `updateAccountByAccountId` mutation."""
input UpdateAccountByAccountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  accountPatch: AccountPatch!
  accountId: String!
}

"""The output of our update `Category` mutation."""
type UpdateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was updated by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Genre` that is related to this `Category`."""
  genreByGenreId: Genre
}

"""All input for the `updateCategory` mutation."""
input UpdateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!
}

"""
Represents an update to a `Category`. Fields that are set will be updated.
"""
input CategoryPatch {
  categoryId: String
  categoryName: String
  genreId: String
  validFlag: Boolean
  displayOrder: Int
}

"""All input for the `updateCategoryByCategoryId` mutation."""
input UpdateCategoryByCategoryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!
  categoryId: String!
}

"""The output of our update `DailyDetail` mutation."""
type UpdateDailyDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DailyDetail` that was updated by this mutation."""
  dailyDetail: DailyDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `DailyDetail`."""
  categoryByCategoryId: Category

  """Reads a single `Account` that is related to this `DailyDetail`."""
  accountByAccountId: Account

  """Reads a single `User` that is related to this `DailyDetail`."""
  userByUserId: User
}

"""All input for the `updateDailyDetail` mutation."""
input UpdateDailyDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DailyDetail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DailyDetail` being updated.
  """
  dailyDetailPatch: DailyDetailPatch!
}

"""
Represents an update to a `DailyDetail`. Fields that are set will be updated.
"""
input DailyDetailPatch {
  serialNo: Int
  date: Date
  categoryId: String
  accountId: String
  userId: String
  amount: BigFloat
  memo: String
}

"""All input for the `updateDailyDetailBySerialNo` mutation."""
input UpdateDailyDetailBySerialNoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DailyDetail` being updated.
  """
  dailyDetailPatch: DailyDetailPatch!
  serialNo: Int!
}

"""The output of our update `Genre` mutation."""
type UpdateGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Genre` that was updated by this mutation."""
  genre: Genre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGenre` mutation."""
input UpdateGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Genre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Genre` being updated.
  """
  genrePatch: GenrePatch!
}

"""
Represents an update to a `Genre`. Fields that are set will be updated.
"""
input GenrePatch {
  genreId: String
  genreName: String
  genreType: GenreType
  iocomeType: IocomeType
  validFlag: Boolean
  displayOrder: Int
}

"""All input for the `updateGenreByGenreId` mutation."""
input UpdateGenreByGenreIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Genre` being updated.
  """
  genrePatch: GenrePatch!
  genreId: String!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  userId: String
  userName: String
  displayOrder: Int
}

"""All input for the `updateUserByUserId` mutation."""
input UpdateUserByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  userId: String!
}

"""The output of our delete `Account` mutation."""
type DeleteAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was deleted by this mutation."""
  account: Account
  deletedAccountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Account`."""
  userByOwnerUserId: User
}

"""All input for the `deleteAccount` mutation."""
input DeleteAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAccountByAccountId` mutation."""
input DeleteAccountByAccountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: String!
}

"""The output of our delete `Category` mutation."""
type DeleteCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was deleted by this mutation."""
  category: Category
  deletedCategoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Genre` that is related to this `Category`."""
  genreByGenreId: Genre
}

"""All input for the `deleteCategory` mutation."""
input DeleteCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCategoryByCategoryId` mutation."""
input DeleteCategoryByCategoryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  categoryId: String!
}

"""The output of our delete `DailyDetail` mutation."""
type DeleteDailyDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DailyDetail` that was deleted by this mutation."""
  dailyDetail: DailyDetail
  deletedDailyDetailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `DailyDetail`."""
  categoryByCategoryId: Category

  """Reads a single `Account` that is related to this `DailyDetail`."""
  accountByAccountId: Account

  """Reads a single `User` that is related to this `DailyDetail`."""
  userByUserId: User
}

"""All input for the `deleteDailyDetail` mutation."""
input DeleteDailyDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DailyDetail` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDailyDetailBySerialNo` mutation."""
input DeleteDailyDetailBySerialNoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  serialNo: Int!
}

"""The output of our delete `Genre` mutation."""
type DeleteGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Genre` that was deleted by this mutation."""
  genre: Genre
  deletedGenreId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGenre` mutation."""
input DeleteGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Genre` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGenreByGenreId` mutation."""
input DeleteGenreByGenreIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  genreId: String!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserByUserId` mutation."""
input DeleteUserByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: String!
}
