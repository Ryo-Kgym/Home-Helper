"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `Account`."""
  allAccountsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): [Account!]

  """Reads a set of `Category`."""
  allCategoriesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): [Category!]

  """Reads a set of `CreditCardDetail`."""
  allCreditCardDetailsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CreditCardDetail`."""
    orderBy: [CreditCardDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreditCardDetailCondition
  ): [CreditCardDetail!]

  """Reads a set of `CreditCardSummary`."""
  allCreditCardSummariesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CreditCardSummary`."""
    orderBy: [CreditCardSummariesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreditCardSummaryCondition
  ): [CreditCardSummary!]

  """Reads a set of `CreditCardSummaryTotalByAccountView`."""
  allCreditCardSummaryTotalByAccountViewsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CreditCardSummaryTotalByAccountView`."""
    orderBy: [CreditCardSummaryTotalByAccountViewsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreditCardSummaryTotalByAccountViewCondition
  ): [CreditCardSummaryTotalByAccountView!]

  """Reads a set of `DailyDetail`."""
  allDailyDetailsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyDetail`."""
    orderBy: [DailyDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyDetailCondition
  ): [DailyDetail!]

  """Reads a set of `DailyTotalView`."""
  allDailyTotalViewsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyTotalView`."""
    orderBy: [DailyTotalViewsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyTotalViewCondition
  ): [DailyTotalView!]

  """Reads a set of `Genre`."""
  allGenresList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition
  ): [Genre!]

  """Reads a set of `Group`."""
  allGroupsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition
  ): [Group!]

  """Reads a set of `ImportFileHistory`."""
  allImportFileHistoriesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ImportFileHistory`."""
    orderBy: [ImportFileHistoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImportFileHistoryCondition
  ): [ImportFileHistory!]

  """Reads a set of `SummaryCategoryByGroup`."""
  allSummaryCategoryByGroupsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SummaryCategoryByGroup`."""
    orderBy: [SummaryCategoryByGroupsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SummaryCategoryByGroupCondition
  ): [SummaryCategoryByGroup!]

  """Reads a set of `SummaryCategoryByUser`."""
  allSummaryCategoryByUsersList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SummaryCategoryByUser`."""
    orderBy: [SummaryCategoryByUsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SummaryCategoryByUserCondition
  ): [SummaryCategoryByUser!]

  """Reads a set of `TotalByAccountView`."""
  allTotalByAccountViewsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TotalByAccountView`."""
    orderBy: [TotalByAccountViewsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TotalByAccountViewCondition
  ): [TotalByAccountView!]

  """Reads a set of `TotalByCategoryView`."""
  allTotalByCategoryViewsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TotalByCategoryView`."""
    orderBy: [TotalByCategoryViewsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TotalByCategoryViewCondition
  ): [TotalByCategoryView!]

  """Reads a set of `TotalByGenreView`."""
  allTotalByGenreViewsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TotalByGenreView`."""
    orderBy: [TotalByGenreViewsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TotalByGenreViewCondition
  ): [TotalByGenreView!]

  """Reads a set of `User`."""
  allUsersList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): [User!]
  accountByAccountId(accountId: UUID!): Account
  categoryByCategoryId(categoryId: UUID!): Category
  creditCardDetailById(id: UUID!): CreditCardDetail
  creditCardSummaryById(id: UUID!): CreditCardSummary
  dailyDetailById(id: UUID!): DailyDetail
  genreByGenreId(genreId: UUID!): Genre
  groupByGroupId(groupId: UUID!): Group
  importFileHistoryById(id: UUID!): ImportFileHistory
  summaryCategoryByGroupById(id: UUID!): SummaryCategoryByGroup
  summaryCategoryByUserById(id: UUID!): SummaryCategoryByUser
  userByUserId(userId: UUID!): User

  """Reads and enables pagination through a set of `TotalByAccountView`."""
  accountTotalList(
    groupId: UUID
    fromDate: Date
    toDate: Date

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [TotalByAccountView]

  """Reads and enables pagination through a set of `TotalByCategoryView`."""
  categoryTotalByMonthList(
    groupId: UUID
    fromDate: Date
    toDate: Date

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [TotalByCategoryView]

  """Reads and enables pagination through a set of `DailyDetail`."""
  dailyDetailByDateList(
    groupId: UUID
    fromDate: Date
    toDate: Date

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [DailyDetail]

  """Reads and enables pagination through a set of `TotalByGenreView`."""
  genreTotalByMonthList(
    groupId: UUID
    fromDate: Date
    toDate: Date

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [TotalByGenreView]

  """Reads a single `Account` using its globally unique `ID`."""
  account(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    nodeId: ID!
  ): Account

  """Reads a single `Category` using its globally unique `ID`."""
  category(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    nodeId: ID!
  ): Category

  """Reads a single `CreditCardDetail` using its globally unique `ID`."""
  creditCardDetail(
    """
    The globally unique `ID` to be used in selecting a single `CreditCardDetail`.
    """
    nodeId: ID!
  ): CreditCardDetail

  """Reads a single `CreditCardSummary` using its globally unique `ID`."""
  creditCardSummary(
    """
    The globally unique `ID` to be used in selecting a single `CreditCardSummary`.
    """
    nodeId: ID!
  ): CreditCardSummary

  """Reads a single `DailyDetail` using its globally unique `ID`."""
  dailyDetail(
    """
    The globally unique `ID` to be used in selecting a single `DailyDetail`.
    """
    nodeId: ID!
  ): DailyDetail

  """Reads a single `Genre` using its globally unique `ID`."""
  genre(
    """The globally unique `ID` to be used in selecting a single `Genre`."""
    nodeId: ID!
  ): Genre

  """Reads a single `Group` using its globally unique `ID`."""
  group(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group

  """Reads a single `ImportFileHistory` using its globally unique `ID`."""
  importFileHistory(
    """
    The globally unique `ID` to be used in selecting a single `ImportFileHistory`.
    """
    nodeId: ID!
  ): ImportFileHistory

  """
  Reads a single `SummaryCategoryByGroup` using its globally unique `ID`.
  """
  summaryCategoryByGroup(
    """
    The globally unique `ID` to be used in selecting a single `SummaryCategoryByGroup`.
    """
    nodeId: ID!
  ): SummaryCategoryByGroup

  """Reads a single `SummaryCategoryByUser` using its globally unique `ID`."""
  summaryCategoryByUser(
    """
    The globally unique `ID` to be used in selecting a single `SummaryCategoryByUser`.
    """
    nodeId: ID!
  ): SummaryCategoryByUser

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Account implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  accountId: UUID!
  accountName: String!
  validFlag: Boolean
  displayOrder: Int!
  groupId: UUID!

  """Reads a single `Group` that is related to this `Account`."""
  groupByGroupId: Group

  """Reads and enables pagination through a set of `DailyDetail`."""
  dailyDetailsByAccountIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyDetail`."""
    orderBy: [DailyDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyDetailCondition
  ): [DailyDetail!]!

  """Reads and enables pagination through a set of `CreditCardSummary`."""
  creditCardSummariesByAccountIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CreditCardSummary`."""
    orderBy: [CreditCardSummariesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreditCardSummaryCondition
  ): [CreditCardSummary!]!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

type Group implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  groupId: UUID!
  groupName: String!

  """Reads and enables pagination through a set of `User`."""
  usersByGroupIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): [User!]!

  """Reads and enables pagination through a set of `Genre`."""
  genresByGroupIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition
  ): [Genre!]!

  """Reads and enables pagination through a set of `Category`."""
  categoriesByGroupIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): [Category!]!

  """Reads and enables pagination through a set of `Account`."""
  accountsByGroupIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): [Account!]!

  """
  Reads and enables pagination through a set of `SummaryCategoryByGroup`.
  """
  summaryCategoryByGroupsByGroupIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SummaryCategoryByGroup`."""
    orderBy: [SummaryCategoryByGroupsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SummaryCategoryByGroupCondition
  ): [SummaryCategoryByGroup!]!

  """Reads and enables pagination through a set of `DailyDetail`."""
  dailyDetailsByGroupIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyDetail`."""
    orderBy: [DailyDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyDetailCondition
  ): [DailyDetail!]!

  """Reads and enables pagination through a set of `ImportFileHistory`."""
  importFileHistoriesByGroupIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ImportFileHistory`."""
    orderBy: [ImportFileHistoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImportFileHistoryCondition
  ): [ImportFileHistory!]!

  """Reads and enables pagination through a set of `CreditCardSummary`."""
  creditCardSummariesByGroupIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CreditCardSummary`."""
    orderBy: [CreditCardSummariesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreditCardSummaryCondition
  ): [CreditCardSummary!]!
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: UUID!
  userName: String!
  displayOrder: Int!
  groupId: UUID!

  """Reads a single `Group` that is related to this `User`."""
  groupByGroupId: Group

  """Reads and enables pagination through a set of `SummaryCategoryByUser`."""
  summaryCategoryByUsersByUserIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SummaryCategoryByUser`."""
    orderBy: [SummaryCategoryByUsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SummaryCategoryByUserCondition
  ): [SummaryCategoryByUser!]!

  """Reads and enables pagination through a set of `DailyDetail`."""
  dailyDetailsByUserIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyDetail`."""
    orderBy: [DailyDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyDetailCondition
  ): [DailyDetail!]!

  """Reads and enables pagination through a set of `ImportFileHistory`."""
  importFileHistoriesByImportUserIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ImportFileHistory`."""
    orderBy: [ImportFileHistoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImportFileHistoryCondition
  ): [ImportFileHistory!]!

  """Reads and enables pagination through a set of `CreditCardDetail`."""
  creditCardDetailsByUserIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CreditCardDetail`."""
    orderBy: [CreditCardDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreditCardDetailCondition
  ): [CreditCardDetail!]!
}

type SummaryCategoryByUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  categoryId: UUID!
  displayOrder: Int!
  userId: UUID!

  """
  Reads a single `Category` that is related to this `SummaryCategoryByUser`.
  """
  categoryByCategoryId: Category

  """Reads a single `User` that is related to this `SummaryCategoryByUser`."""
  userByUserId: User
}

type Category implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  categoryId: UUID!
  categoryName: String!
  genreId: UUID!
  validFlag: Boolean
  displayOrder: Int!
  groupId: UUID!

  """Reads a single `Genre` that is related to this `Category`."""
  genreByGenreId: Genre

  """Reads a single `Group` that is related to this `Category`."""
  groupByGroupId: Group

  """Reads and enables pagination through a set of `SummaryCategoryByUser`."""
  summaryCategoryByUsersByCategoryIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SummaryCategoryByUser`."""
    orderBy: [SummaryCategoryByUsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SummaryCategoryByUserCondition
  ): [SummaryCategoryByUser!]!

  """
  Reads and enables pagination through a set of `SummaryCategoryByGroup`.
  """
  summaryCategoryByGroupsByCategoryIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SummaryCategoryByGroup`."""
    orderBy: [SummaryCategoryByGroupsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SummaryCategoryByGroupCondition
  ): [SummaryCategoryByGroup!]!

  """Reads and enables pagination through a set of `DailyDetail`."""
  dailyDetailsByCategoryIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DailyDetail`."""
    orderBy: [DailyDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyDetailCondition
  ): [DailyDetail!]!

  """Reads and enables pagination through a set of `CreditCardDetail`."""
  creditCardDetailsByCategoryIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CreditCardDetail`."""
    orderBy: [CreditCardDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreditCardDetailCondition
  ): [CreditCardDetail!]!
}

type Genre implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  genreId: UUID!
  genreName: String!
  genreType: GenreType!
  iocomeType: IocomeType!
  validFlag: Boolean
  displayOrder: Int!
  groupId: UUID!

  """Reads a single `Group` that is related to this `Genre`."""
  groupByGroupId: Group

  """Reads and enables pagination through a set of `Category`."""
  categoriesByGenreIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): [Category!]!
}

enum GenreType {
  FIXED
  FLUCTUATION
}

enum IocomeType {
  INCOME
  OUTCOME
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NATURAL
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  CATEGORY_NAME_ASC
  CATEGORY_NAME_DESC
  GENRE_ID_ASC
  GENRE_ID_DESC
  VALID_FLAG_ASC
  VALID_FLAG_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `categoryId` field."""
  categoryId: UUID

  """Checks for equality with the object’s `categoryName` field."""
  categoryName: String

  """Checks for equality with the object’s `genreId` field."""
  genreId: UUID

  """Checks for equality with the object’s `validFlag` field."""
  validFlag: Boolean

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

"""Methods to use when ordering `SummaryCategoryByUser`."""
enum SummaryCategoryByUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SummaryCategoryByUser` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SummaryCategoryByUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: UUID

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

type SummaryCategoryByGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  categoryId: UUID!
  displayOrder: Int!
  groupId: UUID!

  """
  Reads a single `Category` that is related to this `SummaryCategoryByGroup`.
  """
  categoryByCategoryId: Category

  """
  Reads a single `Group` that is related to this `SummaryCategoryByGroup`.
  """
  groupByGroupId: Group
}

"""Methods to use when ordering `SummaryCategoryByGroup`."""
enum SummaryCategoryByGroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SummaryCategoryByGroup` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SummaryCategoryByGroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: UUID

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

type DailyDetail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  date: Date!
  categoryId: UUID!
  accountId: UUID!
  userId: UUID!
  amount: BigFloat!
  memo: String
  groupId: UUID!

  """Reads a single `Category` that is related to this `DailyDetail`."""
  categoryByCategoryId: Category

  """Reads a single `Account` that is related to this `DailyDetail`."""
  accountByAccountId: Account

  """Reads a single `User` that is related to this `DailyDetail`."""
  userByUserId: User

  """Reads a single `Group` that is related to this `DailyDetail`."""
  groupByGroupId: Group
}

"""The day, does not include a time."""
scalar Date

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""Methods to use when ordering `DailyDetail`."""
enum DailyDetailsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DATE_ASC
  DATE_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  MEMO_ASC
  MEMO_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DailyDetail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DailyDetailCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: UUID

  """Checks for equality with the object’s `accountId` field."""
  accountId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `memo` field."""
  memo: String

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

type CreditCardDetail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  date: Date!
  categoryId: UUID!
  amount: BigFloat!
  memo: String
  summaryId: UUID!
  userId: UUID!

  """Reads a single `Category` that is related to this `CreditCardDetail`."""
  categoryByCategoryId: Category

  """
  Reads a single `CreditCardSummary` that is related to this `CreditCardDetail`.
  """
  creditCardSummaryBySummaryId: CreditCardSummary

  """Reads a single `User` that is related to this `CreditCardDetail`."""
  userByUserId: User
}

type CreditCardSummary implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  creditCard: String!
  withdrawalDate: Date!
  accountId: UUID!
  totalAmount: BigFloat!
  count: Int!
  groupId: UUID!

  """
  Reads a single `ImportFileHistory` that is related to this `CreditCardSummary`.
  """
  importFileHistoryById: ImportFileHistory

  """Reads a single `Account` that is related to this `CreditCardSummary`."""
  accountByAccountId: Account

  """Reads a single `Group` that is related to this `CreditCardSummary`."""
  groupByGroupId: Group

  """Reads and enables pagination through a set of `CreditCardDetail`."""
  creditCardDetailsBySummaryIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CreditCardDetail`."""
    orderBy: [CreditCardDetailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreditCardDetailCondition
  ): [CreditCardDetail!]!
}

type ImportFileHistory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  fileName: String!
  fileType: String!
  importDatetime: Datetime!
  importUserId: UUID!
  groupId: UUID!

  """Reads a single `User` that is related to this `ImportFileHistory`."""
  userByImportUserId: User

  """Reads a single `Group` that is related to this `ImportFileHistory`."""
  groupByGroupId: Group

  """
  Reads a single `CreditCardSummary` that is related to this `ImportFileHistory`.
  """
  creditCardSummaryById: CreditCardSummary
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""Methods to use when ordering `CreditCardDetail`."""
enum CreditCardDetailsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DATE_ASC
  DATE_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  MEMO_ASC
  MEMO_DESC
  SUMMARY_ID_ASC
  SUMMARY_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CreditCardDetail` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CreditCardDetailCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: UUID

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `memo` field."""
  memo: String

  """Checks for equality with the object’s `summaryId` field."""
  summaryId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""Methods to use when ordering `ImportFileHistory`."""
enum ImportFileHistoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FILE_NAME_ASC
  FILE_NAME_DESC
  FILE_TYPE_ASC
  FILE_TYPE_DESC
  IMPORT_DATETIME_ASC
  IMPORT_DATETIME_DESC
  IMPORT_USER_ID_ASC
  IMPORT_USER_ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ImportFileHistory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ImportFileHistoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `fileName` field."""
  fileName: String

  """Checks for equality with the object’s `fileType` field."""
  fileType: String

  """Checks for equality with the object’s `importDatetime` field."""
  importDatetime: Datetime

  """Checks for equality with the object’s `importUserId` field."""
  importUserId: UUID

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  USER_NAME_ASC
  USER_NAME_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `userName` field."""
  userName: String

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

"""Methods to use when ordering `Genre`."""
enum GenresOrderBy {
  NATURAL
  GENRE_ID_ASC
  GENRE_ID_DESC
  GENRE_NAME_ASC
  GENRE_NAME_DESC
  GENRE_TYPE_ASC
  GENRE_TYPE_DESC
  IOCOME_TYPE_ASC
  IOCOME_TYPE_DESC
  VALID_FLAG_ASC
  VALID_FLAG_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Genre` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GenreCondition {
  """Checks for equality with the object’s `genreId` field."""
  genreId: UUID

  """Checks for equality with the object’s `genreName` field."""
  genreName: String

  """Checks for equality with the object’s `genreType` field."""
  genreType: GenreType

  """Checks for equality with the object’s `iocomeType` field."""
  iocomeType: IocomeType

  """Checks for equality with the object’s `validFlag` field."""
  validFlag: Boolean

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  NATURAL
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  VALID_FLAG_ASC
  VALID_FLAG_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `accountId` field."""
  accountId: UUID

  """Checks for equality with the object’s `accountName` field."""
  accountName: String

  """Checks for equality with the object’s `validFlag` field."""
  validFlag: Boolean

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

"""Methods to use when ordering `CreditCardSummary`."""
enum CreditCardSummariesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREDIT_CARD_ASC
  CREDIT_CARD_DESC
  WITHDRAWAL_DATE_ASC
  WITHDRAWAL_DATE_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  TOTAL_AMOUNT_ASC
  TOTAL_AMOUNT_DESC
  COUNT_ASC
  COUNT_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CreditCardSummary` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CreditCardSummaryCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `creditCard` field."""
  creditCard: String

  """Checks for equality with the object’s `withdrawalDate` field."""
  withdrawalDate: Date

  """Checks for equality with the object’s `accountId` field."""
  accountId: UUID

  """Checks for equality with the object’s `totalAmount` field."""
  totalAmount: BigFloat

  """Checks for equality with the object’s `count` field."""
  count: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

type CreditCardSummaryTotalByAccountView {
  date: Date
  accountId: UUID
  accountName: String
  displayOrder: Int
  iocomeType: IocomeType
  total: BigFloat
  groupId: UUID
}

"""Methods to use when ordering `CreditCardSummaryTotalByAccountView`."""
enum CreditCardSummaryTotalByAccountViewsOrderBy {
  NATURAL
  DATE_ASC
  DATE_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  IOCOME_TYPE_ASC
  IOCOME_TYPE_DESC
  TOTAL_ASC
  TOTAL_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
}

"""
A condition to be used against `CreditCardSummaryTotalByAccountView` object
types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CreditCardSummaryTotalByAccountViewCondition {
  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `accountId` field."""
  accountId: UUID

  """Checks for equality with the object’s `accountName` field."""
  accountName: String

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int

  """Checks for equality with the object’s `iocomeType` field."""
  iocomeType: IocomeType

  """Checks for equality with the object’s `total` field."""
  total: BigFloat

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

type DailyTotalView {
  date: Date
  iocomeType: IocomeType
  total: BigFloat
  groupId: UUID
}

"""Methods to use when ordering `DailyTotalView`."""
enum DailyTotalViewsOrderBy {
  NATURAL
  DATE_ASC
  DATE_DESC
  IOCOME_TYPE_ASC
  IOCOME_TYPE_DESC
  TOTAL_ASC
  TOTAL_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
}

"""
A condition to be used against `DailyTotalView` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DailyTotalViewCondition {
  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `iocomeType` field."""
  iocomeType: IocomeType

  """Checks for equality with the object’s `total` field."""
  total: BigFloat

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  NATURAL
  GROUP_ID_ASC
  GROUP_ID_DESC
  GROUP_NAME_ASC
  GROUP_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID

  """Checks for equality with the object’s `groupName` field."""
  groupName: String
}

type TotalByAccountView {
  date: Date
  accountId: UUID
  accountName: String
  displayOrder: Int
  iocomeType: IocomeType
  total: BigFloat
  groupId: UUID
}

"""Methods to use when ordering `TotalByAccountView`."""
enum TotalByAccountViewsOrderBy {
  NATURAL
  DATE_ASC
  DATE_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  DISPLAY_ORDER_ASC
  DISPLAY_ORDER_DESC
  IOCOME_TYPE_ASC
  IOCOME_TYPE_DESC
  TOTAL_ASC
  TOTAL_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
}

"""
A condition to be used against `TotalByAccountView` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TotalByAccountViewCondition {
  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `accountId` field."""
  accountId: UUID

  """Checks for equality with the object’s `accountName` field."""
  accountName: String

  """Checks for equality with the object’s `displayOrder` field."""
  displayOrder: Int

  """Checks for equality with the object’s `iocomeType` field."""
  iocomeType: IocomeType

  """Checks for equality with the object’s `total` field."""
  total: BigFloat

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

type TotalByCategoryView {
  date: Date
  iocomeType: IocomeType
  genreId: UUID
  genreName: String
  categoryId: UUID
  categoryName: String
  total: BigFloat
  groupId: UUID
}

"""Methods to use when ordering `TotalByCategoryView`."""
enum TotalByCategoryViewsOrderBy {
  NATURAL
  DATE_ASC
  DATE_DESC
  IOCOME_TYPE_ASC
  IOCOME_TYPE_DESC
  GENRE_ID_ASC
  GENRE_ID_DESC
  GENRE_NAME_ASC
  GENRE_NAME_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  CATEGORY_NAME_ASC
  CATEGORY_NAME_DESC
  TOTAL_ASC
  TOTAL_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
}

"""
A condition to be used against `TotalByCategoryView` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TotalByCategoryViewCondition {
  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `iocomeType` field."""
  iocomeType: IocomeType

  """Checks for equality with the object’s `genreId` field."""
  genreId: UUID

  """Checks for equality with the object’s `genreName` field."""
  genreName: String

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: UUID

  """Checks for equality with the object’s `categoryName` field."""
  categoryName: String

  """Checks for equality with the object’s `total` field."""
  total: BigFloat

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

type TotalByGenreView {
  date: Date
  iocomeType: IocomeType
  genreId: UUID
  genreName: String
  total: BigFloat
  groupId: UUID
}

"""Methods to use when ordering `TotalByGenreView`."""
enum TotalByGenreViewsOrderBy {
  NATURAL
  DATE_ASC
  DATE_DESC
  IOCOME_TYPE_ASC
  IOCOME_TYPE_DESC
  GENRE_ID_ASC
  GENRE_ID_DESC
  GENRE_NAME_ASC
  GENRE_NAME_DESC
  TOTAL_ASC
  TOTAL_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
}

"""
A condition to be used against `TotalByGenreView` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TotalByGenreViewCondition {
  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `iocomeType` field."""
  iocomeType: IocomeType

  """Checks for equality with the object’s `genreId` field."""
  genreId: UUID

  """Checks for equality with the object’s `genreName` field."""
  genreName: String

  """Checks for equality with the object’s `total` field."""
  total: BigFloat

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Account`."""
  createAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAccountInput!
  ): CreateAccountPayload

  """Creates a single `Category`."""
  createCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """Creates a single `CreditCardDetail`."""
  createCreditCardDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCreditCardDetailInput!
  ): CreateCreditCardDetailPayload

  """Creates a single `CreditCardSummary`."""
  createCreditCardSummary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCreditCardSummaryInput!
  ): CreateCreditCardSummaryPayload

  """Creates a single `DailyDetail`."""
  createDailyDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDailyDetailInput!
  ): CreateDailyDetailPayload

  """Creates a single `Genre`."""
  createGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGenreInput!
  ): CreateGenrePayload

  """Creates a single `Group`."""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """Creates a single `ImportFileHistory`."""
  createImportFileHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateImportFileHistoryInput!
  ): CreateImportFileHistoryPayload

  """Creates a single `SummaryCategoryByGroup`."""
  createSummaryCategoryByGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSummaryCategoryByGroupInput!
  ): CreateSummaryCategoryByGroupPayload

  """Creates a single `SummaryCategoryByUser`."""
  createSummaryCategoryByUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSummaryCategoryByUserInput!
  ): CreateSummaryCategoryByUserPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `Account` using its globally unique id and a patch."""
  updateAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload

  """Updates a single `Account` using a unique key and a patch."""
  updateAccountByAccountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountByAccountIdInput!
  ): UpdateAccountPayload

  """Updates a single `Category` using its globally unique id and a patch."""
  updateCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategoryByCategoryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByCategoryIdInput!
  ): UpdateCategoryPayload

  """
  Updates a single `CreditCardDetail` using its globally unique id and a patch.
  """
  updateCreditCardDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCreditCardDetailInput!
  ): UpdateCreditCardDetailPayload

  """Updates a single `CreditCardDetail` using a unique key and a patch."""
  updateCreditCardDetailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCreditCardDetailByIdInput!
  ): UpdateCreditCardDetailPayload

  """
  Updates a single `CreditCardSummary` using its globally unique id and a patch.
  """
  updateCreditCardSummary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCreditCardSummaryInput!
  ): UpdateCreditCardSummaryPayload

  """Updates a single `CreditCardSummary` using a unique key and a patch."""
  updateCreditCardSummaryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCreditCardSummaryByIdInput!
  ): UpdateCreditCardSummaryPayload

  """
  Updates a single `DailyDetail` using its globally unique id and a patch.
  """
  updateDailyDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDailyDetailInput!
  ): UpdateDailyDetailPayload

  """Updates a single `DailyDetail` using a unique key and a patch."""
  updateDailyDetailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDailyDetailByIdInput!
  ): UpdateDailyDetailPayload

  """Updates a single `Genre` using its globally unique id and a patch."""
  updateGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGenreInput!
  ): UpdateGenrePayload

  """Updates a single `Genre` using a unique key and a patch."""
  updateGenreByGenreId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGenreByGenreIdInput!
  ): UpdateGenrePayload

  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroupByGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByGroupIdInput!
  ): UpdateGroupPayload

  """
  Updates a single `ImportFileHistory` using its globally unique id and a patch.
  """
  updateImportFileHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImportFileHistoryInput!
  ): UpdateImportFileHistoryPayload

  """Updates a single `ImportFileHistory` using a unique key and a patch."""
  updateImportFileHistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImportFileHistoryByIdInput!
  ): UpdateImportFileHistoryPayload

  """
  Updates a single `SummaryCategoryByGroup` using its globally unique id and a patch.
  """
  updateSummaryCategoryByGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSummaryCategoryByGroupInput!
  ): UpdateSummaryCategoryByGroupPayload

  """
  Updates a single `SummaryCategoryByGroup` using a unique key and a patch.
  """
  updateSummaryCategoryByGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSummaryCategoryByGroupByIdInput!
  ): UpdateSummaryCategoryByGroupPayload

  """
  Updates a single `SummaryCategoryByUser` using its globally unique id and a patch.
  """
  updateSummaryCategoryByUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSummaryCategoryByUserInput!
  ): UpdateSummaryCategoryByUserPayload

  """
  Updates a single `SummaryCategoryByUser` using a unique key and a patch.
  """
  updateSummaryCategoryByUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSummaryCategoryByUserByIdInput!
  ): UpdateSummaryCategoryByUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUserIdInput!
  ): UpdateUserPayload

  """Deletes a single `Account` using its globally unique id."""
  deleteAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountInput!
  ): DeleteAccountPayload

  """Deletes a single `Account` using a unique key."""
  deleteAccountByAccountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountByAccountIdInput!
  ): DeleteAccountPayload

  """Deletes a single `Category` using its globally unique id."""
  deleteCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategoryByCategoryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByCategoryIdInput!
  ): DeleteCategoryPayload

  """Deletes a single `CreditCardDetail` using its globally unique id."""
  deleteCreditCardDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCreditCardDetailInput!
  ): DeleteCreditCardDetailPayload

  """Deletes a single `CreditCardDetail` using a unique key."""
  deleteCreditCardDetailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCreditCardDetailByIdInput!
  ): DeleteCreditCardDetailPayload

  """Deletes a single `CreditCardSummary` using its globally unique id."""
  deleteCreditCardSummary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCreditCardSummaryInput!
  ): DeleteCreditCardSummaryPayload

  """Deletes a single `CreditCardSummary` using a unique key."""
  deleteCreditCardSummaryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCreditCardSummaryByIdInput!
  ): DeleteCreditCardSummaryPayload

  """Deletes a single `DailyDetail` using its globally unique id."""
  deleteDailyDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDailyDetailInput!
  ): DeleteDailyDetailPayload

  """Deletes a single `DailyDetail` using a unique key."""
  deleteDailyDetailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDailyDetailByIdInput!
  ): DeleteDailyDetailPayload

  """Deletes a single `Genre` using its globally unique id."""
  deleteGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGenreInput!
  ): DeleteGenrePayload

  """Deletes a single `Genre` using a unique key."""
  deleteGenreByGenreId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGenreByGenreIdInput!
  ): DeleteGenrePayload

  """Deletes a single `Group` using its globally unique id."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroupByGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByGroupIdInput!
  ): DeleteGroupPayload

  """Deletes a single `ImportFileHistory` using its globally unique id."""
  deleteImportFileHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImportFileHistoryInput!
  ): DeleteImportFileHistoryPayload

  """Deletes a single `ImportFileHistory` using a unique key."""
  deleteImportFileHistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImportFileHistoryByIdInput!
  ): DeleteImportFileHistoryPayload

  """
  Deletes a single `SummaryCategoryByGroup` using its globally unique id.
  """
  deleteSummaryCategoryByGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSummaryCategoryByGroupInput!
  ): DeleteSummaryCategoryByGroupPayload

  """Deletes a single `SummaryCategoryByGroup` using a unique key."""
  deleteSummaryCategoryByGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSummaryCategoryByGroupByIdInput!
  ): DeleteSummaryCategoryByGroupPayload

  """Deletes a single `SummaryCategoryByUser` using its globally unique id."""
  deleteSummaryCategoryByUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSummaryCategoryByUserInput!
  ): DeleteSummaryCategoryByUserPayload

  """Deletes a single `SummaryCategoryByUser` using a unique key."""
  deleteSummaryCategoryByUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSummaryCategoryByUserByIdInput!
  ): DeleteSummaryCategoryByUserPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUserIdInput!
  ): DeleteUserPayload
}

"""The output of our create `Account` mutation."""
type CreateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was created by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `Account`."""
  groupByGroupId: Group
}

"""All input for the create `Account` mutation."""
input CreateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Account` to be created by this mutation."""
  account: AccountInput!
}

"""An input for mutations affecting `Account`"""
input AccountInput {
  accountId: UUID!
  accountName: String!
  validFlag: Boolean
  displayOrder: Int!
  groupId: UUID!
}

"""The output of our create `Category` mutation."""
type CreateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was created by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Genre` that is related to this `Category`."""
  genreByGenreId: Genre

  """Reads a single `Group` that is related to this `Category`."""
  groupByGroupId: Group
}

"""All input for the create `Category` mutation."""
input CreateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Category` to be created by this mutation."""
  category: CategoryInput!
}

"""An input for mutations affecting `Category`"""
input CategoryInput {
  categoryId: UUID!
  categoryName: String!
  genreId: UUID!
  validFlag: Boolean
  displayOrder: Int!
  groupId: UUID!
}

"""The output of our create `CreditCardDetail` mutation."""
type CreateCreditCardDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CreditCardDetail` that was created by this mutation."""
  creditCardDetail: CreditCardDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `CreditCardDetail`."""
  categoryByCategoryId: Category

  """
  Reads a single `CreditCardSummary` that is related to this `CreditCardDetail`.
  """
  creditCardSummaryBySummaryId: CreditCardSummary

  """Reads a single `User` that is related to this `CreditCardDetail`."""
  userByUserId: User
}

"""All input for the create `CreditCardDetail` mutation."""
input CreateCreditCardDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CreditCardDetail` to be created by this mutation."""
  creditCardDetail: CreditCardDetailInput!
}

"""An input for mutations affecting `CreditCardDetail`"""
input CreditCardDetailInput {
  id: UUID!
  date: Date!
  categoryId: UUID!
  amount: BigFloat!
  memo: String
  summaryId: UUID!
  userId: UUID!
}

"""The output of our create `CreditCardSummary` mutation."""
type CreateCreditCardSummaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CreditCardSummary` that was created by this mutation."""
  creditCardSummary: CreditCardSummary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ImportFileHistory` that is related to this `CreditCardSummary`.
  """
  importFileHistoryById: ImportFileHistory

  """Reads a single `Account` that is related to this `CreditCardSummary`."""
  accountByAccountId: Account

  """Reads a single `Group` that is related to this `CreditCardSummary`."""
  groupByGroupId: Group
}

"""All input for the create `CreditCardSummary` mutation."""
input CreateCreditCardSummaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CreditCardSummary` to be created by this mutation."""
  creditCardSummary: CreditCardSummaryInput!
}

"""An input for mutations affecting `CreditCardSummary`"""
input CreditCardSummaryInput {
  id: UUID!
  creditCard: String!
  withdrawalDate: Date!
  accountId: UUID!
  totalAmount: BigFloat!
  count: Int!
  groupId: UUID!
}

"""The output of our create `DailyDetail` mutation."""
type CreateDailyDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DailyDetail` that was created by this mutation."""
  dailyDetail: DailyDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `DailyDetail`."""
  categoryByCategoryId: Category

  """Reads a single `Account` that is related to this `DailyDetail`."""
  accountByAccountId: Account

  """Reads a single `User` that is related to this `DailyDetail`."""
  userByUserId: User

  """Reads a single `Group` that is related to this `DailyDetail`."""
  groupByGroupId: Group
}

"""All input for the create `DailyDetail` mutation."""
input CreateDailyDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DailyDetail` to be created by this mutation."""
  dailyDetail: DailyDetailInput!
}

"""An input for mutations affecting `DailyDetail`"""
input DailyDetailInput {
  id: UUID!
  date: Date!
  categoryId: UUID!
  accountId: UUID!
  userId: UUID!
  amount: BigFloat!
  memo: String
  groupId: UUID!
}

"""The output of our create `Genre` mutation."""
type CreateGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Genre` that was created by this mutation."""
  genre: Genre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `Genre`."""
  groupByGroupId: Group
}

"""All input for the create `Genre` mutation."""
input CreateGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Genre` to be created by this mutation."""
  genre: GenreInput!
}

"""An input for mutations affecting `Genre`"""
input GenreInput {
  genreId: UUID!
  genreName: String!
  genreType: GenreType!
  iocomeType: IocomeType!
  validFlag: Boolean
  displayOrder: Int!
  groupId: UUID!
}

"""The output of our create `Group` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was created by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Group` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Group` to be created by this mutation."""
  group: GroupInput!
}

"""An input for mutations affecting `Group`"""
input GroupInput {
  groupId: UUID!
  groupName: String!
}

"""The output of our create `ImportFileHistory` mutation."""
type CreateImportFileHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ImportFileHistory` that was created by this mutation."""
  importFileHistory: ImportFileHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ImportFileHistory`."""
  userByImportUserId: User

  """Reads a single `Group` that is related to this `ImportFileHistory`."""
  groupByGroupId: Group
}

"""All input for the create `ImportFileHistory` mutation."""
input CreateImportFileHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ImportFileHistory` to be created by this mutation."""
  importFileHistory: ImportFileHistoryInput!
}

"""An input for mutations affecting `ImportFileHistory`"""
input ImportFileHistoryInput {
  id: UUID!
  fileName: String!
  fileType: String!
  importDatetime: Datetime!
  importUserId: UUID!
  groupId: UUID!
}

"""The output of our create `SummaryCategoryByGroup` mutation."""
type CreateSummaryCategoryByGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SummaryCategoryByGroup` that was created by this mutation."""
  summaryCategoryByGroup: SummaryCategoryByGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Category` that is related to this `SummaryCategoryByGroup`.
  """
  categoryByCategoryId: Category

  """
  Reads a single `Group` that is related to this `SummaryCategoryByGroup`.
  """
  groupByGroupId: Group
}

"""All input for the create `SummaryCategoryByGroup` mutation."""
input CreateSummaryCategoryByGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SummaryCategoryByGroup` to be created by this mutation."""
  summaryCategoryByGroup: SummaryCategoryByGroupInput!
}

"""An input for mutations affecting `SummaryCategoryByGroup`"""
input SummaryCategoryByGroupInput {
  id: UUID!
  categoryId: UUID!
  displayOrder: Int!
  groupId: UUID!
}

"""The output of our create `SummaryCategoryByUser` mutation."""
type CreateSummaryCategoryByUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SummaryCategoryByUser` that was created by this mutation."""
  summaryCategoryByUser: SummaryCategoryByUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Category` that is related to this `SummaryCategoryByUser`.
  """
  categoryByCategoryId: Category

  """Reads a single `User` that is related to this `SummaryCategoryByUser`."""
  userByUserId: User
}

"""All input for the create `SummaryCategoryByUser` mutation."""
input CreateSummaryCategoryByUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SummaryCategoryByUser` to be created by this mutation."""
  summaryCategoryByUser: SummaryCategoryByUserInput!
}

"""An input for mutations affecting `SummaryCategoryByUser`"""
input SummaryCategoryByUserInput {
  id: UUID!
  categoryId: UUID!
  displayOrder: Int!
  userId: UUID!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `User`."""
  groupByGroupId: Group
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  userId: UUID!
  userName: String!
  displayOrder: Int!
  groupId: UUID!
}

"""The output of our update `Account` mutation."""
type UpdateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was updated by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `Account`."""
  groupByGroupId: Group
}

"""All input for the `updateAccount` mutation."""
input UpdateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  accountPatch: AccountPatch!
}

"""
Represents an update to a `Account`. Fields that are set will be updated.
"""
input AccountPatch {
  accountId: UUID
  accountName: String
  validFlag: Boolean
  displayOrder: Int
  groupId: UUID
}

"""All input for the `updateAccountByAccountId` mutation."""
input UpdateAccountByAccountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  accountPatch: AccountPatch!
  accountId: UUID!
}

"""The output of our update `Category` mutation."""
type UpdateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was updated by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Genre` that is related to this `Category`."""
  genreByGenreId: Genre

  """Reads a single `Group` that is related to this `Category`."""
  groupByGroupId: Group
}

"""All input for the `updateCategory` mutation."""
input UpdateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!
}

"""
Represents an update to a `Category`. Fields that are set will be updated.
"""
input CategoryPatch {
  categoryId: UUID
  categoryName: String
  genreId: UUID
  validFlag: Boolean
  displayOrder: Int
  groupId: UUID
}

"""All input for the `updateCategoryByCategoryId` mutation."""
input UpdateCategoryByCategoryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!
  categoryId: UUID!
}

"""The output of our update `CreditCardDetail` mutation."""
type UpdateCreditCardDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CreditCardDetail` that was updated by this mutation."""
  creditCardDetail: CreditCardDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `CreditCardDetail`."""
  categoryByCategoryId: Category

  """
  Reads a single `CreditCardSummary` that is related to this `CreditCardDetail`.
  """
  creditCardSummaryBySummaryId: CreditCardSummary

  """Reads a single `User` that is related to this `CreditCardDetail`."""
  userByUserId: User
}

"""All input for the `updateCreditCardDetail` mutation."""
input UpdateCreditCardDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CreditCardDetail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CreditCardDetail` being updated.
  """
  creditCardDetailPatch: CreditCardDetailPatch!
}

"""
Represents an update to a `CreditCardDetail`. Fields that are set will be updated.
"""
input CreditCardDetailPatch {
  id: UUID
  date: Date
  categoryId: UUID
  amount: BigFloat
  memo: String
  summaryId: UUID
  userId: UUID
}

"""All input for the `updateCreditCardDetailById` mutation."""
input UpdateCreditCardDetailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CreditCardDetail` being updated.
  """
  creditCardDetailPatch: CreditCardDetailPatch!
  id: UUID!
}

"""The output of our update `CreditCardSummary` mutation."""
type UpdateCreditCardSummaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CreditCardSummary` that was updated by this mutation."""
  creditCardSummary: CreditCardSummary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ImportFileHistory` that is related to this `CreditCardSummary`.
  """
  importFileHistoryById: ImportFileHistory

  """Reads a single `Account` that is related to this `CreditCardSummary`."""
  accountByAccountId: Account

  """Reads a single `Group` that is related to this `CreditCardSummary`."""
  groupByGroupId: Group
}

"""All input for the `updateCreditCardSummary` mutation."""
input UpdateCreditCardSummaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CreditCardSummary` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CreditCardSummary` being updated.
  """
  creditCardSummaryPatch: CreditCardSummaryPatch!
}

"""
Represents an update to a `CreditCardSummary`. Fields that are set will be updated.
"""
input CreditCardSummaryPatch {
  id: UUID
  creditCard: String
  withdrawalDate: Date
  accountId: UUID
  totalAmount: BigFloat
  count: Int
  groupId: UUID
}

"""All input for the `updateCreditCardSummaryById` mutation."""
input UpdateCreditCardSummaryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CreditCardSummary` being updated.
  """
  creditCardSummaryPatch: CreditCardSummaryPatch!
  id: UUID!
}

"""The output of our update `DailyDetail` mutation."""
type UpdateDailyDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DailyDetail` that was updated by this mutation."""
  dailyDetail: DailyDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `DailyDetail`."""
  categoryByCategoryId: Category

  """Reads a single `Account` that is related to this `DailyDetail`."""
  accountByAccountId: Account

  """Reads a single `User` that is related to this `DailyDetail`."""
  userByUserId: User

  """Reads a single `Group` that is related to this `DailyDetail`."""
  groupByGroupId: Group
}

"""All input for the `updateDailyDetail` mutation."""
input UpdateDailyDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DailyDetail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DailyDetail` being updated.
  """
  dailyDetailPatch: DailyDetailPatch!
}

"""
Represents an update to a `DailyDetail`. Fields that are set will be updated.
"""
input DailyDetailPatch {
  id: UUID
  date: Date
  categoryId: UUID
  accountId: UUID
  userId: UUID
  amount: BigFloat
  memo: String
  groupId: UUID
}

"""All input for the `updateDailyDetailById` mutation."""
input UpdateDailyDetailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DailyDetail` being updated.
  """
  dailyDetailPatch: DailyDetailPatch!
  id: UUID!
}

"""The output of our update `Genre` mutation."""
type UpdateGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Genre` that was updated by this mutation."""
  genre: Genre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `Genre`."""
  groupByGroupId: Group
}

"""All input for the `updateGenre` mutation."""
input UpdateGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Genre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Genre` being updated.
  """
  genrePatch: GenrePatch!
}

"""
Represents an update to a `Genre`. Fields that are set will be updated.
"""
input GenrePatch {
  genreId: UUID
  genreName: String
  genreType: GenreType
  iocomeType: IocomeType
  validFlag: Boolean
  displayOrder: Int
  groupId: UUID
}

"""All input for the `updateGenreByGenreId` mutation."""
input UpdateGenreByGenreIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Genre` being updated.
  """
  genrePatch: GenrePatch!
  genreId: UUID!
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  groupPatch: GroupPatch!
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  groupId: UUID
  groupName: String
}

"""All input for the `updateGroupByGroupId` mutation."""
input UpdateGroupByGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  groupPatch: GroupPatch!
  groupId: UUID!
}

"""The output of our update `ImportFileHistory` mutation."""
type UpdateImportFileHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ImportFileHistory` that was updated by this mutation."""
  importFileHistory: ImportFileHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ImportFileHistory`."""
  userByImportUserId: User

  """Reads a single `Group` that is related to this `ImportFileHistory`."""
  groupByGroupId: Group
}

"""All input for the `updateImportFileHistory` mutation."""
input UpdateImportFileHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ImportFileHistory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ImportFileHistory` being updated.
  """
  importFileHistoryPatch: ImportFileHistoryPatch!
}

"""
Represents an update to a `ImportFileHistory`. Fields that are set will be updated.
"""
input ImportFileHistoryPatch {
  id: UUID
  fileName: String
  fileType: String
  importDatetime: Datetime
  importUserId: UUID
  groupId: UUID
}

"""All input for the `updateImportFileHistoryById` mutation."""
input UpdateImportFileHistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ImportFileHistory` being updated.
  """
  importFileHistoryPatch: ImportFileHistoryPatch!
  id: UUID!
}

"""The output of our update `SummaryCategoryByGroup` mutation."""
type UpdateSummaryCategoryByGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SummaryCategoryByGroup` that was updated by this mutation."""
  summaryCategoryByGroup: SummaryCategoryByGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Category` that is related to this `SummaryCategoryByGroup`.
  """
  categoryByCategoryId: Category

  """
  Reads a single `Group` that is related to this `SummaryCategoryByGroup`.
  """
  groupByGroupId: Group
}

"""All input for the `updateSummaryCategoryByGroup` mutation."""
input UpdateSummaryCategoryByGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SummaryCategoryByGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SummaryCategoryByGroup` being updated.
  """
  summaryCategoryByGroupPatch: SummaryCategoryByGroupPatch!
}

"""
Represents an update to a `SummaryCategoryByGroup`. Fields that are set will be updated.
"""
input SummaryCategoryByGroupPatch {
  id: UUID
  categoryId: UUID
  displayOrder: Int
  groupId: UUID
}

"""All input for the `updateSummaryCategoryByGroupById` mutation."""
input UpdateSummaryCategoryByGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SummaryCategoryByGroup` being updated.
  """
  summaryCategoryByGroupPatch: SummaryCategoryByGroupPatch!
  id: UUID!
}

"""The output of our update `SummaryCategoryByUser` mutation."""
type UpdateSummaryCategoryByUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SummaryCategoryByUser` that was updated by this mutation."""
  summaryCategoryByUser: SummaryCategoryByUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Category` that is related to this `SummaryCategoryByUser`.
  """
  categoryByCategoryId: Category

  """Reads a single `User` that is related to this `SummaryCategoryByUser`."""
  userByUserId: User
}

"""All input for the `updateSummaryCategoryByUser` mutation."""
input UpdateSummaryCategoryByUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SummaryCategoryByUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SummaryCategoryByUser` being updated.
  """
  summaryCategoryByUserPatch: SummaryCategoryByUserPatch!
}

"""
Represents an update to a `SummaryCategoryByUser`. Fields that are set will be updated.
"""
input SummaryCategoryByUserPatch {
  id: UUID
  categoryId: UUID
  displayOrder: Int
  userId: UUID
}

"""All input for the `updateSummaryCategoryByUserById` mutation."""
input UpdateSummaryCategoryByUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SummaryCategoryByUser` being updated.
  """
  summaryCategoryByUserPatch: SummaryCategoryByUserPatch!
  id: UUID!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `User`."""
  groupByGroupId: Group
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  userId: UUID
  userName: String
  displayOrder: Int
  groupId: UUID
}

"""All input for the `updateUserByUserId` mutation."""
input UpdateUserByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  userId: UUID!
}

"""The output of our delete `Account` mutation."""
type DeleteAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was deleted by this mutation."""
  account: Account
  deletedAccountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `Account`."""
  groupByGroupId: Group
}

"""All input for the `deleteAccount` mutation."""
input DeleteAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAccountByAccountId` mutation."""
input DeleteAccountByAccountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: UUID!
}

"""The output of our delete `Category` mutation."""
type DeleteCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was deleted by this mutation."""
  category: Category
  deletedCategoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Genre` that is related to this `Category`."""
  genreByGenreId: Genre

  """Reads a single `Group` that is related to this `Category`."""
  groupByGroupId: Group
}

"""All input for the `deleteCategory` mutation."""
input DeleteCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCategoryByCategoryId` mutation."""
input DeleteCategoryByCategoryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  categoryId: UUID!
}

"""The output of our delete `CreditCardDetail` mutation."""
type DeleteCreditCardDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CreditCardDetail` that was deleted by this mutation."""
  creditCardDetail: CreditCardDetail
  deletedCreditCardDetailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `CreditCardDetail`."""
  categoryByCategoryId: Category

  """
  Reads a single `CreditCardSummary` that is related to this `CreditCardDetail`.
  """
  creditCardSummaryBySummaryId: CreditCardSummary

  """Reads a single `User` that is related to this `CreditCardDetail`."""
  userByUserId: User
}

"""All input for the `deleteCreditCardDetail` mutation."""
input DeleteCreditCardDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CreditCardDetail` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCreditCardDetailById` mutation."""
input DeleteCreditCardDetailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `CreditCardSummary` mutation."""
type DeleteCreditCardSummaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CreditCardSummary` that was deleted by this mutation."""
  creditCardSummary: CreditCardSummary
  deletedCreditCardSummaryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ImportFileHistory` that is related to this `CreditCardSummary`.
  """
  importFileHistoryById: ImportFileHistory

  """Reads a single `Account` that is related to this `CreditCardSummary`."""
  accountByAccountId: Account

  """Reads a single `Group` that is related to this `CreditCardSummary`."""
  groupByGroupId: Group
}

"""All input for the `deleteCreditCardSummary` mutation."""
input DeleteCreditCardSummaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CreditCardSummary` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCreditCardSummaryById` mutation."""
input DeleteCreditCardSummaryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `DailyDetail` mutation."""
type DeleteDailyDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DailyDetail` that was deleted by this mutation."""
  dailyDetail: DailyDetail
  deletedDailyDetailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `DailyDetail`."""
  categoryByCategoryId: Category

  """Reads a single `Account` that is related to this `DailyDetail`."""
  accountByAccountId: Account

  """Reads a single `User` that is related to this `DailyDetail`."""
  userByUserId: User

  """Reads a single `Group` that is related to this `DailyDetail`."""
  groupByGroupId: Group
}

"""All input for the `deleteDailyDetail` mutation."""
input DeleteDailyDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DailyDetail` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDailyDetailById` mutation."""
input DeleteDailyDetailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Genre` mutation."""
type DeleteGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Genre` that was deleted by this mutation."""
  genre: Genre
  deletedGenreId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `Genre`."""
  groupByGroupId: Group
}

"""All input for the `deleteGenre` mutation."""
input DeleteGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Genre` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGenreByGenreId` mutation."""
input DeleteGenreByGenreIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  genreId: UUID!
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was deleted by this mutation."""
  group: Group
  deletedGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupByGroupId` mutation."""
input DeleteGroupByGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: UUID!
}

"""The output of our delete `ImportFileHistory` mutation."""
type DeleteImportFileHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ImportFileHistory` that was deleted by this mutation."""
  importFileHistory: ImportFileHistory
  deletedImportFileHistoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ImportFileHistory`."""
  userByImportUserId: User

  """Reads a single `Group` that is related to this `ImportFileHistory`."""
  groupByGroupId: Group
}

"""All input for the `deleteImportFileHistory` mutation."""
input DeleteImportFileHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ImportFileHistory` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteImportFileHistoryById` mutation."""
input DeleteImportFileHistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `SummaryCategoryByGroup` mutation."""
type DeleteSummaryCategoryByGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SummaryCategoryByGroup` that was deleted by this mutation."""
  summaryCategoryByGroup: SummaryCategoryByGroup
  deletedSummaryCategoryByGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Category` that is related to this `SummaryCategoryByGroup`.
  """
  categoryByCategoryId: Category

  """
  Reads a single `Group` that is related to this `SummaryCategoryByGroup`.
  """
  groupByGroupId: Group
}

"""All input for the `deleteSummaryCategoryByGroup` mutation."""
input DeleteSummaryCategoryByGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SummaryCategoryByGroup` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSummaryCategoryByGroupById` mutation."""
input DeleteSummaryCategoryByGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `SummaryCategoryByUser` mutation."""
type DeleteSummaryCategoryByUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SummaryCategoryByUser` that was deleted by this mutation."""
  summaryCategoryByUser: SummaryCategoryByUser
  deletedSummaryCategoryByUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Category` that is related to this `SummaryCategoryByUser`.
  """
  categoryByCategoryId: Category

  """Reads a single `User` that is related to this `SummaryCategoryByUser`."""
  userByUserId: User
}

"""All input for the `deleteSummaryCategoryByUser` mutation."""
input DeleteSummaryCategoryByUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SummaryCategoryByUser` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSummaryCategoryByUserById` mutation."""
input DeleteSummaryCategoryByUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `User`."""
  groupByGroupId: Group
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserByUserId` mutation."""
input DeleteUserByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!
}
